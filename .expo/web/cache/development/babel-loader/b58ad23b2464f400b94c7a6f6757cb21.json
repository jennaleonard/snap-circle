{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/samaraabigail/Desktop/sea/snap-circle/screens/ChatScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { GiftedChat, Actions } from \"react-native-gifted-chat\";\nimport db from \"../firebase\";\nimport firebase from \"@firebase/app\";\nimport * as ImagePicker from \"expo-image-picker\";\nexport default function ChatScreen(_ref) {\n  var _this = this;\n\n  var route = _ref.route;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      imageURI = _useState2[0],\n      setImageURI = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      messages = _useState4[0],\n      setMessages = _useState4[1];\n\n  var _route$params = route.params,\n      chatName = _route$params.chatName,\n      currUser = _route$params.currUser;\n  useEffect(function () {\n    var unsubscribeFromNewSnapshots = db.collection(\"Chats\").doc(chatName).onSnapshot(function (snapshot) {\n      console.log(\"New Snapshot!\");\n      var newMessages = snapshot.data().messages.map(function (singleMessage) {\n        singleMessage.createdAt = singleMessage.createdAt.seconds * 1000;\n        return singleMessage;\n      });\n      setMessages(newMessages);\n    });\n    return function cleanupBeforeUnmounting() {\n      unsubscribeFromNewSnapshots();\n    };\n  }, []);\n\n  var _onSend = useCallback(function _callee() {\n    var messages,\n        downloadURL,\n        _args = arguments;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            messages = _args.length > 0 && _args[0] !== undefined ? _args[0] : [];\n\n            if (!(messages.length < 1)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 3:\n            if (!(imageURI !== null)) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(uploadImage());\n\n          case 6:\n            downloadURL = _context.sent;\n\n            if (downloadURL) {\n              messages[0].image = downloadURL;\n            }\n\n          case 8:\n            db.collection(\"Chats\").doc(chatName).update({\n              messages: firebase.firestore.FieldValue.arrayUnion(messages[0]),\n              lastUpdated: Date.now()\n            });\n            setMessages(function (previousMessages) {\n              return GiftedChat.append(previousMessages, messages);\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [imageURI]);\n\n  var uploadImage = function uploadImage() {\n    var filepath, filename, response, blob, uploadTask, downloadURL;\n    return _regeneratorRuntime.async(function uploadImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            filepath = imageURI;\n            setImageURI(null);\n            filename = filepath.substring(filepath.lastIndexOf(\"/\") + 1);\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(fetch(filepath));\n\n          case 5:\n            response = _context2.sent;\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 8:\n            blob = _context2.sent;\n            uploadTask = firebase.storage().ref(user.uid + \"/\" + filename).put(blob);\n            uploadTask.on(\"state_changed\", function (snapshot) {});\n            downloadURL = null;\n            _context2.prev = 12;\n            _context2.next = 15;\n            return _regeneratorRuntime.awrap(uploadTask);\n\n          case 15:\n            _context2.next = 17;\n            return _regeneratorRuntime.awrap(uploadTask.snapshot.ref.getDownloadURL());\n\n          case 17:\n            downloadURL = _context2.sent;\n            _context2.next = 23;\n            break;\n\n          case 20:\n            _context2.prev = 20;\n            _context2.t0 = _context2[\"catch\"](12);\n            console.error(_context2.t0);\n\n          case 23:\n            return _context2.abrupt(\"return\", downloadURL);\n\n          case 24:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[12, 20]], Promise);\n  };\n\n  var renderAccessory = null;\n\n  var renderActions = function renderActions(props) {\n    var _ref2;\n\n    return React.createElement(Actions, _extends({}, props, {\n      options: (_ref2 = {}, _defineProperty(_ref2, \"Camera\", handleCamera), _defineProperty(_ref2, \"Image Library\", handleLibrary), _defineProperty(_ref2, \"Cancel\", function Cancel() {\n        console.log(\"Cancel\");\n      }), _ref2),\n      icon: function icon() {\n        return imageURI ? React.createElement(Image, {\n          style: {\n            width: 32,\n            height: 32\n          },\n          source: {\n            uri: imageURI\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }\n        }) : React.createElement(Ionicons, {\n          name: \"camera\",\n          size: 28,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }));\n  };\n\n  var handleCamera = function handleCamera() {\n    var permissions, _await$ImagePicker$re, status, result;\n\n    return _regeneratorRuntime.async(function handleCamera$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(Platform.OS !== \"web\")) {\n              _context3.next = 10;\n              break;\n            }\n\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(ImagePicker.getCameraPermissionsAsync());\n\n          case 3:\n            permissions = _context3.sent;\n\n            if (permissions.granted) {\n              _context3.next = 10;\n              break;\n            }\n\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(ImagePicker.requestCameraPermissionsAsync());\n\n          case 7:\n            _await$ImagePicker$re = _context3.sent;\n            status = _await$ImagePicker$re.status;\n\n            if (status !== \"granted\") {\n              alert(\"Sorry, we need camera permissions to make this work!\");\n            }\n\n          case 10:\n            _context3.next = 12;\n            return _regeneratorRuntime.awrap(ImagePicker.launchCameraAsync());\n\n          case 12:\n            result = _context3.sent;\n\n            if (!result.cancelled) {\n              setImageURI(result.uri);\n            }\n\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleLibrary = function handleLibrary() {\n    var permissions, _await$ImagePicker$re2, status, result;\n\n    return _regeneratorRuntime.async(function handleLibrary$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!(Platform.OS !== \"web\")) {\n              _context4.next = 10;\n              break;\n            }\n\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(ImagePicker.getMediaLibraryPermissionsAsync());\n\n          case 3:\n            permissions = _context4.sent;\n\n            if (permissions.granted) {\n              _context4.next = 10;\n              break;\n            }\n\n            _context4.next = 7;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 7:\n            _await$ImagePicker$re2 = _context4.sent;\n            status = _await$ImagePicker$re2.status;\n\n            if (status !== \"granted\") {\n              alert(\"Sorry, we need camera permissions to make this work!\");\n            }\n\n          case 10:\n            _context4.next = 12;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 12:\n            result = _context4.sent;\n\n            if (!result.cancelled) {\n              setImageURI(result.uri);\n            }\n\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(GiftedChat, {\n    messages: messages,\n    onSend: function onSend(messages) {\n      return _onSend(messages);\n    },\n    user: {\n      _id: currUser.uid,\n      name: currUser.displayName,\n      avatar: currUser.photoURL ? currUser.photoURL : null\n    },\n    inverted: false,\n    showUserAvatar: true,\n    renderUsernameOnMessage: true,\n    renderActions: renderActions,\n    renderAccessory: renderAccessory,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/samaraabigail/Desktop/sea/snap-circle/screens/ChatScreen.js"],"names":["React","useState","useCallback","useEffect","Ionicons","GiftedChat","Actions","db","firebase","ImagePicker","ChatScreen","route","imageURI","setImageURI","messages","setMessages","params","chatName","currUser","unsubscribeFromNewSnapshots","collection","doc","onSnapshot","snapshot","console","log","newMessages","data","map","singleMessage","createdAt","seconds","cleanupBeforeUnmounting","onSend","length","uploadImage","downloadURL","image","update","firestore","FieldValue","arrayUnion","lastUpdated","Date","now","previousMessages","append","filepath","filename","substring","lastIndexOf","fetch","response","blob","uploadTask","storage","ref","user","uid","put","on","getDownloadURL","error","renderAccessory","renderActions","props","handleCamera","handleLibrary","width","height","uri","Platform","OS","getCameraPermissionsAsync","permissions","granted","requestCameraPermissionsAsync","status","alert","launchCameraAsync","result","cancelled","getMediaLibraryPermissionsAsync","requestMediaLibraryPermissionsAsync","launchImageLibraryAsync","_id","name","displayName","avatar","photoURL"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport { Image, Platform, View, Button } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { GiftedChat, Actions } from \"react-native-gifted-chat\";\nimport db from \"../firebase\";\nimport firebase from \"@firebase/app\";\nimport * as ImagePicker from \"expo-image-picker\";\n\nexport default function ChatScreen({ route }) {\n  const [imageURI, setImageURI] = useState(null);\n  const [messages, setMessages] = useState([]);\n\n  const { chatName, currUser } = route.params;\n\n  useEffect(() => {\n    let unsubscribeFromNewSnapshots = db\n      .collection(\"Chats\")\n      .doc(chatName)\n      .onSnapshot((snapshot) => {\n        console.log(\"New Snapshot!\");\n        let newMessages = snapshot.data().messages.map((singleMessage) => {\n          singleMessage.createdAt = singleMessage.createdAt.seconds * 1000;\n          return singleMessage;\n        });\n        setMessages(newMessages);\n      });\n\n    return function cleanupBeforeUnmounting() {\n      unsubscribeFromNewSnapshots();\n    };\n  }, []);\n\n  const onSend = useCallback(\n    async (messages = []) => {\n      if (messages.length < 1) return;\n\n      if (imageURI !== null) {\n        let downloadURL = await uploadImage();\n        if (downloadURL) {\n          messages[0].image = downloadURL;\n        }\n      }\n\n      db.collection(\"Chats\")\n        .doc(chatName)\n        .update({\n          // arrayUnion appends the message to the existing array\n          messages: firebase.firestore.FieldValue.arrayUnion(messages[0]),\n          lastUpdated: Date.now(),\n        });\n      setMessages((previousMessages) =>\n        GiftedChat.append(previousMessages, messages)\n      );\n    },\n    [imageURI]\n  );\n\n  const uploadImage = async () => {\n    const filepath = imageURI;\n    setImageURI(null);\n    const filename = filepath.substring(filepath.lastIndexOf(\"/\") + 1);\n    const response = await fetch(filepath);\n    const blob = await response.blob();\n\n    const uploadTask = firebase\n      .storage()\n      .ref(user.uid + \"/\" + filename)\n      .put(blob);\n    // set progress state\n    uploadTask.on(\"state_changed\", (snapshot) => {\n      // setTransferred(\n      //   Math.round(snapshot.bytesTransferred / snapshot.totalBytes) * 10000\n      // );\n    });\n\n    let downloadURL = null;\n\n    try {\n      await uploadTask;\n      downloadURL = await uploadTask.snapshot.ref.getDownloadURL();\n    } catch (e) {\n      console.error(e);\n    }\n\n    return downloadURL;\n  };\n\n  // Replace if using SNAP MINI...\n  const renderAccessory = null;\n  // const renderAccessory = (props) => (\n  //   <View>\n  //     <Button\n  //       onPress={() => {\n  //         alert(\"Launching Snap Mini...\");\n  //       }}\n  //       title={\"Launch Snap Mini\"}\n  //     />\n  //   </View>\n  // );\n\n  const renderActions = (props) => {\n    return (\n      <Actions\n        {...props}\n        options={{\n          [\"Camera\"]: handleCamera,\n          [\"Image Library\"]: handleLibrary,\n          Cancel: () => {\n            console.log(\"Cancel\");\n          },\n        }}\n        icon={() =>\n          imageURI ? (\n            <Image\n              style={{ width: 32, height: 32 }}\n              source={{ uri: imageURI }}\n            />\n          ) : (\n            <Ionicons name={\"camera\"} size={28} />\n          )\n        }\n      />\n    );\n  };\n\n  const handleCamera = async () => {\n    if (Platform.OS !== \"web\") {\n      let permissions = await ImagePicker.getCameraPermissionsAsync();\n      if (!permissions.granted) {\n        const { status } = await ImagePicker.requestCameraPermissionsAsync();\n        if (status !== \"granted\") {\n          alert(\"Sorry, we need camera permissions to make this work!\");\n        }\n      }\n    }\n\n    let result = await ImagePicker.launchCameraAsync();\n    if (!result.cancelled) {\n      setImageURI(result.uri);\n    }\n  };\n\n  const handleLibrary = async () => {\n    if (Platform.OS !== \"web\") {\n      let permissions = await ImagePicker.getMediaLibraryPermissionsAsync();\n      if (!permissions.granted) {\n        const { status } =\n          await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (status !== \"granted\") {\n          alert(\"Sorry, we need camera permissions to make this work!\");\n        }\n      }\n    }\n\n    let result = await ImagePicker.launchImageLibraryAsync();\n    if (!result.cancelled) {\n      setImageURI(result.uri);\n    }\n  };\n\n  return (\n    <GiftedChat\n      messages={messages}\n      onSend={(messages) => onSend(messages)}\n      user={{\n        // current \"blue bubble\" user\n        _id: currUser.uid,\n        name: currUser.displayName,\n        avatar: currUser.photoURL ? currUser.photoURL : null,\n      }}\n      inverted={false}\n      showUserAvatar={true}\n      renderUsernameOnMessage={true}\n      renderActions={renderActions}\n      renderAccessory={renderAccessory}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}