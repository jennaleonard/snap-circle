{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/jennaleonard/Desktop/sea/snap-circle/screens/HomeScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport db from \"../firebase\";\nimport firebase from \"@firebase/app\";\nimport { ListItem, Avatar } from \"react-native-elements\";\nimport Colors from \"../constants/Colors\";\nimport { Ionicons } from \"@expo/vector-icons\";\nvar MILLIS_IN_SEC = 1000;\nvar MILLIS_IN_MIN = MILLIS_IN_SEC * 60;\nvar MILLIS_IN_HOUR = MILLIS_IN_MIN * 60;\nvar MILLIS_IN_DAY = MILLIS_IN_HOUR * 24;\nvar MILLIS_IN_WEEK = MILLIS_IN_DAY * 7;\nexport default function HomeScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      chatList = _useState2[0],\n      setChatList = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currUser = _useState4[0],\n      setCurrUser = _useState4[1];\n\n  var _useState5 = useState(Date.now()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currMillis = _useState6[0],\n      setCurrMillis = _useState6[1];\n\n  useEffect(function () {\n    var unsubscribeFromNewSnapshots = db.collection(\"Users\").doc(firebase.auth().currentUser.uid).onSnapshot(function (userSnapshot) {\n      setCurrUser(_objectSpread({\n        uid: userSnapshot.id\n      }, userSnapshot.data()));\n    });\n    var intervalID = setInterval(function () {\n      return setCurrMillis(Date.now());\n    }, MILLIS_IN_MIN);\n    return function cleanupBeforeUnmounting() {\n      unsubscribeFromNewSnapshots();\n      clearInterval(intervalID);\n    };\n  }, []);\n  useEffect(function () {\n    if (!currUser) return;\n    var chatsRef = db.collection(\"Chats\");\n    var query = chatsRef.where(\"users\", \"array-contains\", currUser.uid);\n    var unsubscribeFromNewSnapshots = query.onSnapshot(function (querySnapshot) {\n      var newChatList = [];\n      querySnapshot.forEach(function (doc) {\n        var newChat = _objectSpread({}, doc.data());\n\n        newChat.id = doc.id;\n        newChatList.push(newChat);\n      });\n      newChatList.sort(function (a, b) {\n        return a.lastUpdated <= b.lastUpdated;\n      });\n      setChatList(newChatList);\n    });\n    return function cleanupBeforeUnmounting() {\n      unsubscribeFromNewSnapshots();\n    };\n  }, [currUser]);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, React.createElement(FlatList, {\n    data: chatList,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(ChatItem, {\n        onPress: function onPress() {\n          return navigation.navigate(\"Chat\", {\n            chatName: item.id,\n            currUser: currUser\n          });\n        },\n        item: item,\n        currMillis: currMillis,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.addButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: styles.Circle,\n    onPress: function onPress() {\n      return navigation.navigate(\"Friends\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, React.createElement(Ionicons, {\n    name: \"add-circle\",\n    size: 60,\n    style: {\n      marginBottom: 8\n    },\n    color: Colors.snapblue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }))));\n}\n\nfunction ChatItem(_ref3) {\n  var onPress = _ref3.onPress,\n      item = _ref3.item,\n      currMillis = _ref3.currMillis;\n  return React.createElement(ListItem, {\n    Component: TouchableOpacity,\n    containerStyle: styles.chatItemContainer,\n    disabledStyle: {\n      opacity: 0.5\n    },\n    onPress: onPress,\n    pad: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, React.createElement(Avatar, {\n    source: require(\"../assets/chat_placeholder.jpg\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), React.createElement(ListItem.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, React.createElement(ListItem.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, item.id)), React.createElement(ListItem.Subtitle, {\n    style: styles.subtitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    style: styles.chatIcon,\n    source: require(\"../assets/bluechat.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }), React.createElement(Text, {\n    style: styles.chatDescription,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, \" \", \"Tap to chat \\u22C5 \", getTimeLabel(currMillis - item.lastUpdated), \" \"))));\n}\n\nvar getTimeLabel = function getTimeLabel(millis_diff) {\n  if (millis_diff < 0) millis_diff = 0;\n  if (millis_diff < MILLIS_IN_HOUR) return Math.floor(millis_diff / MILLIS_IN_MIN) + \"m\";\n  if (millis_diff < MILLIS_IN_DAY) return Math.floor(millis_diff / MILLIS_IN_HOUR) + \"h\";\n  if (millis_diff < MILLIS_IN_WEEK) return Math.floor(millis_diff / MILLIS_IN_DAY) + \"d\";\n  if (millis_diff >= MILLIS_IN_WEEK) return Math.floor(millis_diff / MILLIS_IN_WEEK) + \"w\";\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"white\"\n  },\n  item: {\n    padding: 10,\n    fontSize: 18,\n    height: 44\n  },\n  subtitle: {\n    color: Colors.snapgray,\n    fontSize: 14,\n    flex: 1,\n    flexDirection: \"row\",\n    maxHeight: 20\n  },\n  chatItemContainer: {\n    borderBottomWidth: 1,\n    borderColor: Colors.lightgray,\n    padding: 20\n  },\n  chatIcon: {\n    height: 10,\n    width: 12\n  },\n  chatDescription: {\n    marginLeft: 3\n  },\n  addButton: {\n    position: \"absolute\",\n    bottom: 20,\n    right: 20\n  }\n});","map":{"version":3,"sources":["/Users/jennaleonard/Desktop/sea/snap-circle/screens/HomeScreen.js"],"names":["React","useState","useEffect","db","firebase","ListItem","Avatar","Colors","Ionicons","MILLIS_IN_SEC","MILLIS_IN_MIN","MILLIS_IN_HOUR","MILLIS_IN_DAY","MILLIS_IN_WEEK","HomeScreen","navigation","chatList","setChatList","currUser","setCurrUser","Date","now","currMillis","setCurrMillis","unsubscribeFromNewSnapshots","collection","doc","auth","currentUser","uid","onSnapshot","userSnapshot","id","data","intervalID","setInterval","cleanupBeforeUnmounting","clearInterval","chatsRef","query","where","querySnapshot","newChatList","forEach","newChat","push","sort","a","b","lastUpdated","styles","container","item","navigate","chatName","addButton","Circle","marginBottom","snapblue","ChatItem","onPress","TouchableOpacity","chatItemContainer","opacity","require","subtitle","chatIcon","chatDescription","getTimeLabel","millis_diff","Math","floor","StyleSheet","create","flex","backgroundColor","padding","fontSize","height","color","snapgray","flexDirection","maxHeight","borderBottomWidth","borderColor","lightgray","width","marginLeft","position","bottom","right"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  FlatList,\n  Text,\n  View,\n  TouchableOpacity,\n  Image,\n  StyleSheet,\n} from \"react-native\";\nimport db from \"../firebase\";\nimport firebase from \"@firebase/app\";\nimport { ListItem, Avatar } from \"react-native-elements\";\nimport Colors from \"../constants/Colors\";\nimport { Ionicons } from \"@expo/vector-icons\";\n\nconst MILLIS_IN_SEC = 1000;\nconst MILLIS_IN_MIN = MILLIS_IN_SEC * 60;\nconst MILLIS_IN_HOUR = MILLIS_IN_MIN * 60;\nconst MILLIS_IN_DAY = MILLIS_IN_HOUR * 24;\nconst MILLIS_IN_WEEK = MILLIS_IN_DAY * 7;\n\nexport default function HomeScreen({ navigation }) {\n  const [chatList, setChatList] = useState([]);\n  const [currUser, setCurrUser] = useState(null);\n  const [currMillis, setCurrMillis] = useState(Date.now());\n\n  useEffect(() => {\n    // Download curr user info\n    // (and listen for future updates)\n    // (in case curr user decides to update their profile info)\n\n    let unsubscribeFromNewSnapshots = db\n      .collection(\"Users\")\n      .doc(firebase.auth().currentUser.uid)\n      .onSnapshot((userSnapshot) => {\n        setCurrUser({ uid: userSnapshot.id, ...userSnapshot.data() });\n      });\n\n    // Refresh time labels every minute\n    let intervalID = setInterval(\n      () => setCurrMillis(Date.now()),\n      MILLIS_IN_MIN\n    );\n    return function cleanupBeforeUnmounting() {\n      unsubscribeFromNewSnapshots();\n      clearInterval(intervalID);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!currUser) return;\n    // Download chats for user\n    let chatsRef = db.collection(\"Chats\");\n    let query = chatsRef.where(\"users\", \"array-contains\", currUser.uid);\n    // Venus fix\n    let unsubscribeFromNewSnapshots = query.onSnapshot((querySnapshot) => {\n      let newChatList = [];\n      querySnapshot.forEach((doc) => {\n        let newChat = { ...doc.data() };\n        newChat.id = doc.id;\n        newChatList.push(newChat);\n      });\n      newChatList.sort((a, b) => a.lastUpdated <= b.lastUpdated);\n      setChatList(newChatList);\n    });\n\n    return function cleanupBeforeUnmounting() {\n      unsubscribeFromNewSnapshots();\n    };\n  }, [currUser]);\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={chatList}\n        renderItem={({ item }) => (\n          <ChatItem\n            onPress={() =>\n              navigation.navigate(\"Chat\", {\n                chatName: item.id,\n                currUser: currUser,\n              })\n            }\n            item={item}\n            currMillis={currMillis}\n          />\n        )}\n      />\n      <View style={styles.addButton}>\n        <TouchableOpacity\n          style={styles.Circle}\n          onPress={() => navigation.navigate(\"Friends\")}\n        >\n          <Ionicons\n            name={\"add-circle\"}\n            size={60}\n            style={{ marginBottom: 8 }}\n            color={Colors.snapblue}\n          />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction ChatItem({ onPress, item, currMillis }) {\n  return (\n    <ListItem\n      Component={TouchableOpacity}\n      containerStyle={styles.chatItemContainer}\n      disabledStyle={{ opacity: 0.5 }}\n      onPress={onPress}\n      pad={20}\n    >\n      <Avatar source={require(\"../assets/chat_placeholder.jpg\")} />\n      <ListItem.Content>\n        <ListItem.Title>\n          <Text>{item.id}</Text>\n        </ListItem.Title>\n        <ListItem.Subtitle style={styles.subtitle}>\n          <Image\n            style={styles.chatIcon}\n            source={require(\"../assets/bluechat.png\")}\n          />\n          <Text style={styles.chatDescription}>\n            {\" \"}\n            Tap to chat ⋅ {getTimeLabel(currMillis - item.lastUpdated)}{\" \"}\n          </Text>\n        </ListItem.Subtitle>\n      </ListItem.Content>\n    </ListItem>\n  );\n}\n\nconst getTimeLabel = (millis_diff) => {\n  if (millis_diff < 0) millis_diff = 0;\n  if (millis_diff < MILLIS_IN_HOUR)\n    return `${Math.floor(millis_diff / MILLIS_IN_MIN)}m`;\n  if (millis_diff < MILLIS_IN_DAY)\n    return `${Math.floor(millis_diff / MILLIS_IN_HOUR)}h`;\n  if (millis_diff < MILLIS_IN_WEEK)\n    return `${Math.floor(millis_diff / MILLIS_IN_DAY)}d`;\n  if (millis_diff >= MILLIS_IN_WEEK)\n    return `${Math.floor(millis_diff / MILLIS_IN_WEEK)}w`;\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"white\",\n  },\n  item: {\n    padding: 10,\n    fontSize: 18,\n    height: 44,\n  },\n  subtitle: {\n    color: Colors.snapgray,\n    fontSize: 14,\n    flex: 1,\n    flexDirection: \"row\",\n    maxHeight: 20,\n  },\n  chatItemContainer: {\n    borderBottomWidth: 1,\n    borderColor: Colors.lightgray,\n    padding: 20,\n  },\n  chatIcon: {\n    height: 10,\n    width: 12,\n  },\n  chatDescription: {\n    marginLeft: 3,\n  },\n  addButton: {\n    position: \"absolute\",\n    bottom: 20,\n    right: 20,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}